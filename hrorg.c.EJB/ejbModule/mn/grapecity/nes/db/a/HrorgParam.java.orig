package mn.grapecity.nes.hrorg.c;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import mn.grapecity.nes.CResult;
import mn.grapecity.nes.Condgen;
import mn.grapecity.nes.Func;
import mn.grapecity.nes.NesException;
import mn.grapecity.nes.entity.clnt.ClntDiffField;
import mn.grapecity.nes.entity.clnt.Clntfilterfield;
import mn.grapecity.nes.fa.b.clnt.FARemote;
import mn.grapecity.nes.fa.b.clnt.entity.ClntFaChartEmployee;
import mn.grapecity.nes.fa.b.clnt.entity.ClntFaLocator;
import mn.grapecity.nes.gen.GeneralRemote;
import mn.grapecity.nes.gen.entity.ClntGenFaChart;
import mn.grapecity.nes.gen.entity.ClntGenInvWarehouse;
import mn.grapecity.nes.gen.entity.ClntGenOrgChart;
import mn.grapecity.nes.gen.entity.ClntGenOrgChartType;
import mn.grapecity.nes.gen.entity.ClntVwGenFaChart;
import mn.grapecity.nes.gen.entity.ClntVwGenInvWarehouse;
import mn.grapecity.nes.hri.b.clnt.entity.ClntHriEmployee;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgAssignment;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgChart;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgChartDirection;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgChartHist;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgChartPosition;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgChartPostnAssignment;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgChartPostnRequirement;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgChartType;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgOrgchart;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgOrgchartDetail;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgParentPosition;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgPosition;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgPositionType;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgPostnAssignment;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgPostnDocument;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgPostnLinkRequirement;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgPostnRequirement;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgRank;
import mn.grapecity.nes.hrorg.c.entity.ClntHrorgRegion;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrempPositionList;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgAssignment;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgChart;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgChartDirection;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgChartLst;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgChartPosition;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgChartPostnAss;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgChartPostnReq;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgChartType;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgOrgchart;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgOrgchartDetail;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgParentPosition;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgPosition;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgPositionType;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgPostnAssignment;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgPostnDocument;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgPostnLinkReq;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgPostnRequirement;
import mn.grapecity.nes.hrorg.c.entity.ClntVwHrorgRank;
import mn.grapecity.nes.hrorg.c.entity.HrorgAssignment;
import mn.grapecity.nes.hrorg.c.entity.HrorgChart;
import mn.grapecity.nes.hrorg.c.entity.HrorgChartDirection;
import mn.grapecity.nes.hrorg.c.entity.HrorgChartHist;
import mn.grapecity.nes.hrorg.c.entity.HrorgChartHistPK;
import mn.grapecity.nes.hrorg.c.entity.HrorgChartPosition;
import mn.grapecity.nes.hrorg.c.entity.HrorgChartPositionPK;
import mn.grapecity.nes.hrorg.c.entity.HrorgChartPostnAssignment;
import mn.grapecity.nes.hrorg.c.entity.HrorgChartPostnAssignmentPK;
import mn.grapecity.nes.hrorg.c.entity.HrorgChartPostnRequirement;
import mn.grapecity.nes.hrorg.c.entity.HrorgChartPostnRequirementPK;
import mn.grapecity.nes.hrorg.c.entity.HrorgChartType;
import mn.grapecity.nes.hrorg.c.entity.HrorgOrgchart;
import mn.grapecity.nes.hrorg.c.entity.HrorgOrgchartDetail;
import mn.grapecity.nes.hrorg.c.entity.HrorgOrgchartDetailPK;
import mn.grapecity.nes.hrorg.c.entity.HrorgParentPosition;
import mn.grapecity.nes.hrorg.c.entity.HrorgParentPositionPK;
import mn.grapecity.nes.hrorg.c.entity.HrorgPosition;
import mn.grapecity.nes.hrorg.c.entity.HrorgPositionType;
import mn.grapecity.nes.hrorg.c.entity.HrorgPostnAssignment;
import mn.grapecity.nes.hrorg.c.entity.HrorgPostnAssignmentPK;
import mn.grapecity.nes.hrorg.c.entity.HrorgPostnDocument;
import mn.grapecity.nes.hrorg.c.entity.HrorgPostnDocumentPK;
import mn.grapecity.nes.hrorg.c.entity.HrorgPostnLinkRequirement;
import mn.grapecity.nes.hrorg.c.entity.HrorgPostnLinkRequirementPK;
import mn.grapecity.nes.hrorg.c.entity.HrorgPostnRequirement;
import mn.grapecity.nes.hrorg.c.entity.HrorgRank;
import mn.grapecity.nes.hrorg.c.entity.HrorgRegion;
import mn.grapecity.nes.hrorg.c.entity.VwHrempPositionList;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgAssignment;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgChart;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgChartDirection;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgChartLst;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgChartPosition;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgChartPostnAss;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgChartPostnReq;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgChartSelect;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgChartType;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgOrgchart;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgOrgchartDetail;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgParentPosition;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgPosition;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgPositionType;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgPostnAssignment;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgPostnDocument;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgPostnLinkReq;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgPostnRequirement;
import mn.grapecity.nes.hrorg.c.entity.VwHrorgRank;
import mn.grapecity.nes.hrorg.c.enums.OrgchartStatus;

@Stateless
@LocalBean
public class HrorgParam implements HrorgParamRemote {

	@PersistenceContext
	EntityManager em;

	Condgen cg;

	@EJB
	hrorgInitBean initBean;

	@EJB
	GeneralRemote gen;

	@EJB
	FARemote Fmt;

	private long getSysNo() {
		return 1416L;
	}

	private long getCreatedBy() {
		return initBean.com().getCurrentUserId();
	}

	private String GetUserName(Long userId) {
		return initBean.uac().GetUserName(userId);
	}

	private Date getNow() {
		return new Date();
	}

	private String getCompanyCode() {
		return initBean.com().getCurrentCompanyCode();
	}

	private Long getSeq(String seqKey) {
		return initBean.com().getSeq(seqKey);
	}

	public HrorgParam() {
	}

	// HrorgPostnRequirement
	// VwHrorgPostnRequirement
	public List<ClntVwHrorgPostnRequirement> selectPostnRequirement(Clntfilterfield[] filter, int startPosition,
			int count) throws NesException {
		cg = new Condgen();

		String[] possFields = { "REQUIREMENT_ID", "NAME", "NAME2", "DESCR", "ORDER_NO", "COMPANY_CODE", "STATUS_CODE",
				"STATUS_NAME", "STATUS_NAME2","PROFESSION_ID" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntVwHrorgPostnRequirement> e1 = null;
		List<VwHrorgPostnRequirement> e = null;
		String[] orderColumns = { "ORDER_NO ASC", "MODIFIED_DATETIME DESC" };
		e = cg.getData(lstFilter, VwHrorgPostnRequirement.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgPostnRequirement.class);
		return e1;
	}

	public Long insertPostnRequirement(ClntHrorgPostnRequirement p) throws NesException {

		Long requirementId = getSeq("HRORG_POSTN_REQUIREMENT");

		HrorgPostnRequirement c = new HrorgPostnRequirement();
		c.setRequirementId(requirementId);
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setOrderNo(p.getOrderNo());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));
		c.setProfessionId(p.getProfessionId());

		c.setCompanyCode(getCompanyCode());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);

		return requirementId;
	}

	public void updatePostnRequirement(ClntHrorgPostnRequirement p) throws NesException {

		HrorgPostnRequirement c = em.find(HrorgPostnRequirement.class, p.getRequirementId());
		if (c == null) {
			Func.throwNeX(41416001, "REQUIREMENT_ID", p.getRequirementId());
		}
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setOrderNo(p.getOrderNo());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));
		c.setProfessionId(p.getProfessionId());

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());
	}

	public void deletePostnRequirement(Long requirementId) throws NesException {

		HrorgPostnRequirement c = em.find(HrorgPostnRequirement.class, requirementId);
		if (c == null) {
			Func.throwNeX(0, "REQUIREMENT_ID", requirementId);
		}

		em.remove(c);
	}

	public ClntVwHrorgPostnRequirement detailPostnRequirement(Long requirementId) throws NesException {
		ClntVwHrorgPostnRequirement c1 = null;
		VwHrorgPostnRequirement c = null;
		c = em.find(VwHrorgPostnRequirement.class, requirementId);
		if (c == null) {
			Func.throwNeX(41416001, "REQUIREMENT_ID", requirementId);
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgPostnRequirement.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	// HrorgAssignment
	// VwHrorgAssignment
	public List<ClntVwHrorgAssignment> selectAssignment(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "ASSIGNMENT_ID", "NAME", "NAME2", "DESCR", "ORDER_NO", "COMPANY_CODE", "STATUS_CODE",
				"STATUS_NAME", "STATUS_NAME2" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntVwHrorgAssignment> e1 = null;
		List<VwHrorgAssignment> e = null;
		String[] orderColumns = { "ORDER_NO ASC", "MODIFIED_DATETIME DESC" };
		e = cg.getData(lstFilter, VwHrorgAssignment.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgAssignment.class);
		return e1;
	}

	public Long insertAssignment(ClntHrorgAssignment p) throws NesException {

		Long assignmentId = getSeq("HRORG_ASSIGNMENT");

		HrorgAssignment c = new HrorgAssignment();
		c.setAssignmentId(assignmentId);
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setOrderNo(p.getOrderNo());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));

		c.setCompanyCode(getCompanyCode());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);

		return assignmentId;
	}

	public void updateAssignment(ClntHrorgAssignment p) throws NesException {

		HrorgAssignment c = em.find(HrorgAssignment.class, p.getAssignmentId());
		if (c == null) {
			Func.throwNeX(41416002, "ASSIGNMENT_ID", p.getAssignmentId());
		}
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setOrderNo(p.getOrderNo());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());
	}

	public void deleteAssignment(Long assignmentId) throws NesException {

		HrorgAssignment c = em.find(HrorgAssignment.class, assignmentId);
		if (c == null) {
			Func.throwNeX(41416002, "ASSIGNMENT_ID", assignmentId);
		}

		em.remove(c);
	}

	public ClntVwHrorgAssignment detailAssignment(Long assignmentId) throws NesException {
		ClntVwHrorgAssignment c1 = null;
		VwHrorgAssignment c = null;
		c = em.find(VwHrorgAssignment.class, assignmentId);
		if (c == null) {
			Func.throwNeX(41416002, "ASSIGNMENT_ID", assignmentId);
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgAssignment.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	// HrorgPositionType
	// VwHrorgPositionType
	public List<ClntVwHrorgPositionType> selectPositionType(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "POSITION_TYPE", "NAME", "NAME2", "DESCR", "ORDER_NO", "COMPANY_CODE", "STATUS_CODE",
				"STATUS_NAME", "STATUS_NAME2" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntVwHrorgPositionType> e1 = null;
		List<VwHrorgPositionType> e = null;
		String[] orderColumns = { "ORDER_NO ASC", "MODIFIED_DATETIME DESC" };
		e = cg.getData(lstFilter, VwHrorgPositionType.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgPositionType.class);
		return e1;
	}

	public Long insertPositionType(ClntHrorgPositionType p) throws NesException {

		Long positionType = getSeq("HRORG_POSITION_TYPE");

		HrorgPositionType c = new HrorgPositionType();
		c.setPositionType(positionType);
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setOrderNo(p.getOrderNo());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));

		c.setCompanyCode(getCompanyCode());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);

		return positionType;
	}

	public void updatePositionType(ClntHrorgPositionType p) throws NesException {

		HrorgPositionType c = em.find(HrorgPositionType.class, p.getPositionType());
		if (c == null) {
			Func.throwNeX(41416003, "POSITION_TYPE", p.getPositionType());
		}
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setOrderNo(p.getOrderNo());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());
	}

	public void deletePositionType(Long positionType) throws NesException {

		HrorgPositionType c = em.find(HrorgPositionType.class, positionType);
		if (c == null) {
			Func.throwNeX(41416003, "POSITION_TYPE", positionType);
		}

		em.remove(c);
	}

	public ClntVwHrorgPositionType detailPositionType(Long positionType) throws NesException {
		ClntVwHrorgPositionType c1 = null;
		VwHrorgPositionType c = null;
		c = em.find(VwHrorgPositionType.class, positionType);
		if (c == null) {
			Func.throwNeX(41416003, "POSITION_TYPE", positionType);
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgPositionType.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	// HrorgRank
	// VwHrorgRank
	public List<ClntVwHrorgRank> selectRank(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "RANK_ID", "NAME", "NAME2", "DESCR", "ORDER_NO", "STATUS_CODE", "COMPANY_CODE",
				"STATUS_NAME", "STATUS_NAME2" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntVwHrorgRank> e1 = null;
		List<VwHrorgRank> e = null;
		String[] orderColumns = { "ORDER_NO ASC", "MODIFIED_DATETIME DESC" };
		e = cg.getData(lstFilter, VwHrorgRank.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgRank.class);
		return e1;
	}

	public Long insertRank(ClntHrorgRank p) throws NesException {

		Long rankId = getSeq("HRORG_RANK");

		HrorgRank c = new HrorgRank();
		c.setRankId(rankId);
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setOrderNo(p.getOrderNo());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));

		c.setCompanyCode(getCompanyCode());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);

		return rankId;
	}

	public void updateRank(ClntHrorgRank p) throws NesException {

		HrorgRank c = em.find(HrorgRank.class, p.getRankId());
		if (c == null) {
			Func.throwNeX(41416004, "RANK_ID", p.getRankId());
		}
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setOrderNo(p.getOrderNo());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());
	}

	public void deleteRank(Long rankId) throws NesException {

		HrorgRank c = em.find(HrorgRank.class, rankId);
		if (c == null) {
			Func.throwNeX(41416004, "RANK_ID", rankId);
		}

		em.remove(c);
	}

	public ClntVwHrorgRank detailRank(Long rankId) throws NesException {
		ClntVwHrorgRank c1 = null;
		VwHrorgRank c = null;
		c = em.find(VwHrorgRank.class, rankId);
		if (c == null) {
			Func.throwNeX(41416004, "RANK_ID", rankId);
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgRank.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	// HrorgChartType
	// VwHrorgChartType
	public List<ClntVwHrorgChartType> selectChartType(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "CHART_TYPE_ID", "NAME", "NAME2", "DESCR", "ORDER_NO", "STATUS_CODE", "COMPANY_CODE",
				"STATUS_NAME", "STATUS_NAME2", "RANK" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntVwHrorgChartType> e1 = null;
		List<VwHrorgChartType> e = null;
		String[] orderColumns = { "ORDER_NO ASC", "MODIFIED_DATETIME DESC" };
		e = cg.getData(lstFilter, VwHrorgChartType.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgChartType.class);
		return e1;
	}

	public Long insertChartType(ClntHrorgChartType p) throws NesException {
		ClntGenOrgChartType p1 = new ClntGenOrgChartType();

		p1.setName(Func.toStdStr(p.getName()));
		p1.setName2(Func.toStdStr(p.getName2()));
		p1.setDescription(p.getDescr());
		p1.setOrderNo(p.getOrderNo());
		if (p.getStatusCode().equals("A"))
			p1.setStatus(1L);
		else
			p1.setStatus(0L);

		Long chartTypeId = initBean.gen().insertOrgChartType(p1);

		HrorgChartType c = new HrorgChartType();
		c.setChartTypeId(chartTypeId);
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setOrderNo(p.getOrderNo());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));
		c.setRank(p.getRank());

		c.setCompanyCode(getCompanyCode());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);

		return chartTypeId;
	}

	public void updateChartType(ClntHrorgChartType p) throws NesException {

		HrorgChartType c = em.find(HrorgChartType.class, p.getChartTypeId());
		if (c == null) {
			Func.throwNeX(41416005, "CHART_TYPE_ID", p.getChartTypeId());
		}
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setOrderNo(p.getOrderNo());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));
		c.setRank(p.getRank());

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		ClntGenOrgChartType p1 = new ClntGenOrgChartType();

		p1.setTypeId(p.getChartTypeId());
		p1.setName(Func.toStdStr(p.getName()));
		p1.setName2(Func.toStdStr(p.getName2()));
		p1.setDescription(p.getDescr());
		p1.setOrderNo(p.getOrderNo());
		if (Func.toStdStr(p.getStatusCode()).equals("A"))
			p1.setStatus(1L);
		else
			p1.setStatus(0L);

		initBean.gen().updateOrgChartType(p1);

	}

	public void deleteChartType(Long chartTypeId) throws NesException {

		initBean.gen().deleteOrgChartType(chartTypeId);

		HrorgChartType c = em.find(HrorgChartType.class, chartTypeId);
		if (c == null) {
			Func.throwNeX(41416005, "CHART_TYPE_ID", chartTypeId);
		}

		em.remove(c);
	}

	public ClntVwHrorgChartType detailChartType(Long chartTypeId) throws NesException {
		ClntVwHrorgChartType c1 = null;
		VwHrorgChartType c = null;
		c = em.find(VwHrorgChartType.class, chartTypeId);
		if (c == null) {
			Func.throwNeX(41416005, "CHART_TYPE_ID", chartTypeId);
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgChartType.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	// HrorgChartDirection
	// VwHrorgChartDirection
	public List<ClntVwHrorgChartDirection> selectChartDirection(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "DIRECTION_ID", "COMPANY_CODE", "NAME", "NAME2", "DESCR", "ORDER_NO", "STATUS_CODE",
				"STATUS_NAME", "STATUS_NAME2" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntVwHrorgChartDirection> e1 = null;
		List<VwHrorgChartDirection> e = null;
		String[] orderColumns = { "ORDER_NO ASC", "MODIFIED_DATETIME DESC" };
		e = cg.getData(lstFilter, VwHrorgChartDirection.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgChartDirection.class);
		return e1;
	}

	public Long insertChartDirection(ClntHrorgChartDirection p) throws NesException {

		Long directionId = getSeq("HRORG_CHART_DIRECTION");

		HrorgChartDirection c = new HrorgChartDirection();
		c.setDirectionId(directionId);
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setOrderNo(p.getOrderNo());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));

		c.setCompanyCode(getCompanyCode());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);

		return directionId;
	}

	public void updateChartDirection(ClntHrorgChartDirection p) throws NesException {

		HrorgChartDirection c = em.find(HrorgChartDirection.class, p.getDirectionId());
		if (c == null) {
			Func.throwNeX(41416006, "DIRECTION_ID", p.getDirectionId());
		}
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setOrderNo(p.getOrderNo());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());
	}

	public void deleteChartDirection(Long directionId) throws NesException {

		HrorgChartDirection c = em.find(HrorgChartDirection.class, directionId);
		if (c == null) {
			Func.throwNeX(41416006, "DIRECTION_ID", directionId);
		}

		em.remove(c);
	}

	public ClntVwHrorgChartDirection detailChartDirection(Long directionId) throws NesException {
		ClntVwHrorgChartDirection c1 = null;
		VwHrorgChartDirection c = null;
		c = em.find(VwHrorgChartDirection.class, directionId);
		if (c == null) {
			Func.throwNeX(41416006, "DIRECTION_ID", directionId);
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgChartDirection.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	// HrorgPosition
	// VwHrorgPosition
	public List<ClntVwHrorgPosition> selectPosition(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "POSITION_CODE", "NAME", "NAME2", "POSITION_TYPE", "STATUS_CODE", "SALARY_MAX_LIMIT",
				"SALARY_MIN_LIMIT", "ORDER_NO", "COMPANY_CODE", "STATUS_NAME", "STATUS_NAME2", "POSITION_NAME",
				"POSITION_NAME2", "RANK" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntVwHrorgPosition> e1 = null;
		List<VwHrorgPosition> e = null;
		String[] orderColumns = { "ORDER_NO ASC", "MODIFIED_DATETIME DESC" };
		e = cg.getData(lstFilter, VwHrorgPosition.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgPosition.class);
		return e1;
	}

	public void insertPosition(ClntHrorgPosition p) throws NesException {

		HrorgPosition c = new HrorgPosition();
		c.setPositionCode(p.getPositionCode());
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setPositionType(p.getPositionType());
		c.setFunctions(p.getFunctions());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));
		c.setRank(p.getRank());
		c.setSalaryMaxLimit(p.getSalaryMaxLimit());
		c.setSalaryMinLimit(p.getSalaryMinLimit());
		c.setOrderNo(p.getOrderNo());

		c.setAdUserGroups(p.getAdUserGroups());
		c.setAdIsLogOnPc(p.getAdIsLogOnPc());
		c.setAdLogOnPcAdd(p.getAdLogOnPcAdd());

		c.setCompanyCode(getCompanyCode());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);

	}

	public void updatePosition(ClntHrorgPosition p) throws NesException {

		HrorgPosition c = em.find(HrorgPosition.class, Func.toStdStr(p.getPositionCode()));
		if (Func.emptyOrNull(c)) {
			Func.throwNeX(41416008, "POSITION_CODE", Func.toStdStr(p.getPositionCode()));
		}
		if (Func.equal(p.getStatusCode(), OrgchartStatus.INACTIVE)) {
			List<HrorgChartPosition> chartPosition = em
					.createQuery(
							"select a from HrorgChartPosition a where a.id.positionCode = ?1 "
									+ "and a.statusCode = ?2 and a.companyCode = ?3",
							HrorgChartPosition.class)
					.setParameter(1, p.getPositionCode())
					.setParameter(2, OrgchartStatus.ACTIVE).setParameter(3, getCompanyCode()).getResultList();
			if (!Func.emptyOrNull(chartPosition) && chartPosition.size() > 0)
				Func.throwNeX(41416021, "CHART_CODE", chartPosition.get(0).getId().getChartCode(), "POSITION_CODE",
						chartPosition.get(0).getId().getPositionCode());

		}
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setPositionType(p.getPositionType());
		c.setFunctions(p.getFunctions());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));
		c.setRank(p.getRank());
		c.setSalaryMaxLimit(p.getSalaryMaxLimit());
		c.setSalaryMinLimit(p.getSalaryMinLimit());
		c.setOrderNo(p.getOrderNo());

		c.setAdUserGroups(p.getAdUserGroups());
		c.setAdIsLogOnPc(p.getAdIsLogOnPc());
		c.setAdLogOnPcAdd(p.getAdLogOnPcAdd());

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());
	}

	public void deletePosition(String positionCode) throws NesException {

		List<HrorgChartPosition> chartPosition = em
				.createQuery(
						"select a from HrorgChartPosition a where a.id.positionCode = ?1 "
								+ "and a.statusCode = ?2 and a.companyCode = ?3",
						HrorgChartPosition.class)
				.setParameter(1, positionCode)
				.setParameter(2, OrgchartStatus.ACTIVE).setParameter(3, getCompanyCode()).getResultList();
		if (!Func.emptyOrNull(chartPosition) && chartPosition.size() > 0)
			Func.throwNeX(41416021, "CHART_CODE", chartPosition.get(0).getId().getChartCode(), "POSITION_CODE",
					chartPosition.get(0).getId().getPositionCode());
		em.createQuery("DELETE FROM HrorgPostnLinkRequirement a where a.id.positionCode = ?1 ")
				.setParameter(1, positionCode).executeUpdate();

		em.createQuery("DELETE FROM HrorgPostnAssignment a where a.id.positionCode = ?1 ")
				.setParameter(1, positionCode).executeUpdate();

		HrorgPosition c = em.find(HrorgPosition.class, Func.toStdStr(positionCode));
		if (c == null) {
			Func.throwNeX(41416008, "POSITION_CODE", Func.toStdStr(positionCode));
		}

		em.remove(c);
	}

	public ClntVwHrorgPosition detailPosition(String positionCode) throws NesException {
		ClntVwHrorgPosition c1 = null;
		VwHrorgPosition c = null;
		c = em.find(VwHrorgPosition.class, Func.toStdStr(positionCode));
		if (c == null) {
			Func.throwNeX(41416008, "POSITION_CODE", Func.toStdStr(positionCode));
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgPosition.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	// HrorgChart
	// VwHrorgChart
	public List<ClntVwHrorgChart> selectChart(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();
		String[] possFields = { "CHART_CODE", "NAME", "NAME2", "FUNCTIONS", "STATUS_CODE", "ESTABLISHED_DATE",
				"LIQUIDATED_DATE", "ORDER_NO", "CHART_TYPE_ID", "COMPANY_CODE", "ADDR_ID", "ADDR_DETAIL", "WTIME_ID",
				"CALENDAR_ID", "RC_CODE", "DIRECTION_ID", "IS_ONLINE" };

		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntVwHrorgChart> e1 = null;
		List<VwHrorgChart> e = null;
		String[] orderColumns = { "ORDER_NO ASC", "MODIFIED_DATETIME DESC" };
		e = cg.getData(lstFilter, VwHrorgChart.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgChart.class);
		return e1;
	}

	public void insertLocator(ClntHrorgChart p) throws NesException {
		ClntFaLocator c = new ClntFaLocator();

		c.setName(Func.toStdStr(p.getName()) + " - Байршил");
		c.setStatus(1L);
		c.setOrderNo(p.getOrderNo());
		c.setIsMain(1L);
		c.setFaChartCode(Func.toStdStr(p.getChartCode()));

		Fmt.InsertLocator(c);
	}

	public void insertChart(ClntHrorgChart p) throws NesException {

		HrorgChart c = new HrorgChart();

		ClntHrorgChart oldChart = Func.CloneToClnt(c, ClntHrorgChart.class);
		c.setChartCode(Func.toStdStr(p.getChartCode()));
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setHeadEmpId(p.getHeadEmpId());
		c.setFunctions(p.getFunctions());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));
		c.setEstablishedDate(p.getEstablishedDate());
		c.setLiquidatedDate(p.getLiquidatedDate());
		c.setOrderNo(p.getOrderNo());
		c.setChartTypeId(p.getChartTypeId());
		c.setAddrId(p.getAddrId());
		c.setAddrDetail(p.getAddrDetail());
		c.setShiftId(p.getShiftId());
		c.setCalendarId(p.getCalendarId());
		c.setRcCode(Func.toStdStr(p.getRcCode()));
		c.setDirectionId(p.getDirectionId());
		c.setIsOnline(p.getIsOnline());
		c.setOrgUnit(p.getOrgUnit());
		c.setAdUserGroups(p.getAdUserGroups());

		ClntHrorgChart newChart = Func.CloneToClnt(c, ClntHrorgChart.class);
		newChart.setCalendarName(p.getCalendarName());
		newChart.setChartTypeName(p.getChartTypeName());
		newChart.setRcName(p.getRcName());
		newChart.setDirectionName(p.getDirectionName());
		newChart.setStatusName(p.getStatusName());

		c.setCompanyCode(getCompanyCode());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);
		List<ClntDiffField> tmpDiff = Func.getDiffFields(oldChart, newChart, false);
		initBean.bulgMasterRmt().SaveBULG(tmpDiff, "HRORG_CHART", Func.toStr(c.getChartCode()), "HRORG_CHART",
				Func.toStr(c.getChartCode()), "ADD", getSysNo());

		syncGenCharts(p, null);

		insertLocator(p);
	}

	public void updateChart(ClntHrorgChart p, Long chartId) throws NesException {

		HrorgChart c = em.find(HrorgChart.class, Func.toStdStr(p.getChartCode()));

		if (c == null) {
			Func.throwNeX(41416007, "CHART_CODE", Func.toStdStr(p.getChartCode()));
		}
		VwHrorgChart c1 = em.find(VwHrorgChart.class, Func.toStdStr(p.getChartCode()));
		ClntHrorgChart oldChart = Func.CloneToClnt(c1, ClntHrorgChart.class);

		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setHeadEmpId(p.getHeadEmpId());
		c.setFunctions(p.getFunctions());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));
		c.setEstablishedDate(p.getEstablishedDate());
		c.setLiquidatedDate(p.getLiquidatedDate());
		c.setOrderNo(p.getOrderNo());
		c.setChartTypeId(p.getChartTypeId());
		c.setAddrId(p.getAddrId());
		c.setAddrDetail(p.getAddrDetail());
		c.setShiftId(p.getShiftId());
		c.setCalendarId(p.getCalendarId());
		c.setRcCode(Func.toStdStr(p.getRcCode()));
		c.setDirectionId(p.getDirectionId());
		c.setIsOnline(p.getIsOnline());
		c.setOrgUnit(p.getOrgUnit());
		c.setAdUserGroups(p.getAdUserGroups());

		ClntHrorgChart newChart = Func.CloneToClnt(c, ClntHrorgChart.class);
		newChart.setCalendarName(p.getCalendarName());
		newChart.setChartTypeName(p.getChartTypeName());
		newChart.setRcName(p.getRcName());
		newChart.setDirectionName(p.getDirectionName());
		newChart.setStatusName(p.getStatusName());

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		List<ClntDiffField> tmpDiff = Func.getDiffFields(oldChart, newChart, false);
		if (!Func.nullOrZero(chartId)) {
			initBean.bulgMasterRmt().SaveBULG(tmpDiff, "HRORG_CHART", Func.toStr(chartId), "HRORG_CHART",
					Func.toStr(c.getChartCode()), "EDIT", getSysNo());
		} else {
			initBean.bulgMasterRmt().SaveBULG(tmpDiff, "HRORG_CHART", Func.toStr(c.getChartCode()), "HRORG_CHART",
					Func.toStr(c.getChartCode()), "EDIT", getSysNo());
		}

		Long mainChartId = selectMainOrgchart();
		if (!Func.nullOrZero(mainChartId)) {
			ClntVwHrorgOrgchartDetail d = detailOrgchartDetailNoException(mainChartId, p.getChartCode());
			if (d != null) {
				syncGenCharts(p, d.getParentChartCode());
			} else {
				syncGenCharts(p, null);
			}
		}
	}

	public void deleteChart(String chartCode) throws NesException {
		List<String> chartDetail = em
				.createNativeQuery("select * from pr_account where chart_code =?1 and status  in ('O', 'N') ")
				.setParameter(2, chartCode).getResultList();
		if (!Func.emptyOrNull(chartDetail) && chartDetail.size() > 0)
			Func.throwNeX(41416025, "CHART_CODE", chartCode);

		em.createQuery("DELETE FROM HrorgChartPostnAssignment a where a.id.chartCode = ?1 ")
				.setParameter(1, chartCode).executeUpdate();

		em.createQuery("DELETE FROM HrorgChartPostnRequirement a where a.id.chartCode = ?1 ")
				.setParameter(1, chartCode).executeUpdate();

		em.createQuery("DELETE FROM HrorgParentPosition a where a.id.chartCode = ?1 ")
				.setParameter(1, chartCode).executeUpdate();

		em.createQuery("DELETE FROM HrorgChartPosition a where a.id.chartCode = ?1 ")
				.setParameter(2, chartCode).executeUpdate();

		HrorgChart c = em.find(HrorgChart.class, Func.toStdStr(chartCode));
		if (c == null) {
			Func.throwNeX(41416007, "CHART_CODE", Func.toStdStr(chartCode));
		}

		em.remove(c);

		initBean.gen().deleteOrgChart(chartCode);
		String addAutoChart = initBean.gen().GetConfigValue(1416, "ADD_AUTO_CHART");
		if (addAutoChart.equals("1")) {
			initBean.gen().deleteFaChart(chartCode);
			initBean.gen().deleteInvWarehouse(chartCode);
		}
	}

	public ClntVwHrorgChart detailChart(String chartCode) throws NesException {
		ClntVwHrorgChart c1 = null;
		VwHrorgChart c = null;
		c = em.find(VwHrorgChart.class, Func.toStdStr(chartCode));
		if (c == null) {
			Func.throwNeX(41416007, "CHART_CODE", Func.toStdStr(chartCode));
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgChart.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	public ClntHrorgChart getChart(String chartCode, boolean throwNotFoundException) throws NesException {
		ClntHrorgChart c1 = null;
		HrorgChart c = null;
		c = em.find(HrorgChart.class, Func.toStdStr(chartCode));
		if (c == null) {
			if (throwNotFoundException) 
				Func.throwNeX(41416007, "CHART_CODE", Func.toStdStr(chartCode));
		} else { 
			c1 = Func.CloneToClnt(c, ClntHrorgChart.class);
 		}
		return c1;
	}

	public void liquidatedChart(String chartCode) throws NesException {
		List<HrorgOrgchartDetail> chartPosition = em
				.createQuery(
						"select a from HrorgOrgchartDetail a where a.id.chartCode = ?1 "
								+ "and a.statusCode = ?2 and a.companyCode = ?3",
						HrorgOrgchartDetail.class)
				.setParameter(1, chartCode).setParameter(2, OrgchartStatus.ACTIVE).setParameter(3, getCompanyCode())
				.getResultList();
		if (!Func.emptyOrNull(chartPosition) && chartPosition.size() > 0)
			Func.throwNeX(41416022, "CHART_ID", chartPosition.get(0).getId().getChartId(), "CHART_CODE",
					chartPosition.get(0).getId().getChartCode());
		HrorgChart c = em.find(HrorgChart.class, Func.toStdStr(chartCode));
		ClntHrorgChart chart = Func.CloneToClnt(c, ClntHrorgChart.class);
		chart.setStatusCode(OrgchartStatus.LIQUIDATED);
		chart.setStatusName(OrgchartStatus.LIQUIDATED_NAME);
		updateChart(chart, 0L);
	}

	// HrorgPostnLinkRequirement
	// VwHrorgPostnLinkReq
	public List<ClntVwHrorgPostnLinkReq> selectPostnLinkRequirement(Clntfilterfield[] filter, int startPosition,
			int count) throws NesException {
		cg = new Condgen();

		String[] possFields = { "POSITION_CODE", "POSITION_NAME", "POSITION_NAME2", "REQUIREMENT_ID",
				"REQUIREMENT_NAME", "REQUIREMENT_NAME2" };
		cg.addPossField(possFields);

		List<ClntVwHrorgPostnLinkReq> e1 = null;
		List<VwHrorgPostnLinkReq> e = null;
		String[] orderColumns = { "MODIFIED_DATETIME DESC" };
		e = cg.getData(filter, VwHrorgPostnLinkReq.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgPostnLinkReq.class);
		return e1;
	}

	public void insertPostnLinkRequirement(ClntHrorgPostnLinkRequirement p) throws NesException {

		HrorgPostnLinkRequirement c = new HrorgPostnLinkRequirement();
		HrorgPostnLinkRequirementPK id = new HrorgPostnLinkRequirementPK();
		id.setPositionCode(Func.toStdStr(p.getPositionCode()));
		id.setRequirementId(p.getRequirementId());
		c.setId(id);

		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);
	}

	public void updatePostnLinkRequirement(ClntHrorgPostnLinkRequirement p) throws NesException {

		HrorgPostnLinkRequirementPK id = new HrorgPostnLinkRequirementPK();
		id.setPositionCode(Func.toStdStr(p.getPositionCode()));
		id.setRequirementId(p.getRequirementId());
		HrorgPostnLinkRequirement c = em.find(HrorgPostnLinkRequirement.class, id);
		if (c == null) {
			Func.throwNeX(41416009, "POSITION_CODE", Func.toStdStr(p.getPositionCode()), "REQUIREMENT_ID",
					p.getRequirementId());
		}

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());
	}

	public void deletePostnLinkRequirement(String positionCode, Long requirementId) throws NesException {

		HrorgPostnLinkRequirementPK id = new HrorgPostnLinkRequirementPK();
		id.setPositionCode(Func.toStdStr(positionCode));
		id.setRequirementId(requirementId);
		HrorgPostnLinkRequirement c = em.find(HrorgPostnLinkRequirement.class, id);
		if (c == null) {
			Func.throwNeX(41416009, "POSITION_CODE", Func.toStdStr(positionCode), "REQUIREMENT_ID", requirementId);
		}

		em.remove(c);
	}

	public ClntVwHrorgPostnLinkReq detailPostnLinkRequirement(String positionCode, Long requirementId)
			throws NesException {
		ClntVwHrorgPostnLinkReq c1 = null;
		VwHrorgPostnLinkReq c = null;

		try {
			c = em.createQuery(
					"select a from VwHrorgPostnLinkReq a where a.positionCode = ?1 and a.requirementId = ?2 ",
					VwHrorgPostnLinkReq.class).setParameter(1, positionCode)
					.setParameter(2, requirementId).getSingleResult();
		} catch (NoResultException ex) {
			Func.throwNeX(41416009, "POSITION_CODE", Func.toStdStr(positionCode), "REQUIREMENT_ID", requirementId);
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgPostnLinkReq.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	// HrorgPostnAssignment
	// VwHrorgPostnAssignment
	public List<ClntVwHrorgPostnAssignment> selectPostnAssignment(Clntfilterfield[] filter, int startPosition,
			int count) throws NesException {
		cg = new Condgen();

		String[] possFields = { "POSITION_CODE", "POSITION_NAME", "POSITION_NAME2", "ASSIGNMENT_ID", "ASSIGNMENT_NAME",
				"ASSIGNMENT_NAME2" };
		cg.addPossField(possFields);

		List<ClntVwHrorgPostnAssignment> e1 = null;
		List<VwHrorgPostnAssignment> e = null;
		String[] orderColumns = { "MODIFIED_DATETIME DESC" };
		e = cg.getData(filter, VwHrorgPostnAssignment.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgPostnAssignment.class);
		return e1;
	}

	public void insertPostnAssignment(ClntHrorgPostnAssignment p) throws NesException {

		HrorgPostnAssignment c = new HrorgPostnAssignment();
		HrorgPostnAssignmentPK id = new HrorgPostnAssignmentPK();
		id.setPositionCode(Func.toStdStr(p.getPositionCode()));
		id.setAssignmentId(p.getAssignmentId());
		c.setId(id);

		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);
	}

	public void updatePostnAssignment(ClntHrorgPostnAssignment p) throws NesException {

		HrorgPostnAssignmentPK id = new HrorgPostnAssignmentPK();
		id.setPositionCode(Func.toStdStr(p.getPositionCode()));
		id.setAssignmentId(p.getAssignmentId());
		HrorgPostnAssignment c = em.find(HrorgPostnAssignment.class, id);
		if (c == null) {
			Func.throwNeX(41416010, "POSITION_CODE", Func.toStdStr(p.getPositionCode()), "ASSIGNMENT_ID",
					p.getAssignmentId());
		}

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());
	}

	public void deletePostnAssignment(String positionCode, Long assignmentId) throws NesException {

		HrorgPostnAssignmentPK id = new HrorgPostnAssignmentPK();
		id.setPositionCode(Func.toStdStr(positionCode));
		id.setAssignmentId(assignmentId);
		HrorgPostnAssignment c = em.find(HrorgPostnAssignment.class, id);
		if (c == null) {
			Func.throwNeX(41416010, "POSITION_CODE", Func.toStdStr(positionCode), "ASSIGNMENT_ID", assignmentId);
		}

		em.remove(c);
	}

	public ClntVwHrorgPostnAssignment detailPostnAssignment(String positionCode, Long assignmentId)
			throws NesException {
		ClntVwHrorgPostnAssignment c1 = null;
		VwHrorgPostnAssignment c = null;

		try {
			c = em.createQuery(
					"select a from VwHrorgPostnAssignment a where a.positionCode = ?1 and a.assignmentId = ?2 ",
					VwHrorgPostnAssignment.class).setParameter(1, positionCode)
					.setParameter(2, assignmentId)
					.getSingleResult();
		} catch (NoResultException ex) {
			Func.throwNeX(41416010, "POSITION_CODE", Func.toStdStr(positionCode), "ASSIGNMENT_ID", assignmentId);
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgPostnAssignment.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	// HrorgChartPosition
	// VwHrorgChartPosition
	public List<ClntVwHrorgChartPosition> selectChartPosition(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "RN", "POSITION_CODE", "POSITION_NAME", "POSITION_NAME2", "CHART_CODE", "CHART_NAME",
				"CHART_NAME2", "PLANNED_NUMBER", "EXISTED_NUMBER", "FREE_NUMBER", "STATUS_CODE", "RANK", "STATUS_NAME",
				"STATUS_NAME2", "FUNCTIONS", "SALARY_MAX_LIMIT", "SALARY_MIN_LIMIT", "COMPANY_CODE" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntVwHrorgChartPosition> e1 = null;
		List<VwHrorgChartPosition> e = null;
		String[] orderColumns = { "MODIFIED_DATETIME DESC" };
		e = cg.getData(lstFilter, VwHrorgChartPosition.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgChartPosition.class);
		return e1;
	}

	public void insertChartPosition(ClntHrorgChartPosition p) throws NesException {

		HrorgChartPosition c = new HrorgChartPosition();
		HrorgChartPositionPK id = new HrorgChartPositionPK();
		id.setPositionCode(Func.toStdStr(p.getPositionCode()));
		id.setChartCode(Func.toStdStr(p.getChartCode()));
		c.setId(id);

		c.setPlannedNumber(p.getPlannedNumber());
		c.setExistedNumber(p.getExistedNumber());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));
		c.setRank(p.getRank());
		c.setFunctions(p.getFunctions());
		c.setSalaryMaxLimit(p.getSalaryMaxLimit());
		c.setSalaryMinLimit(p.getSalaryMinLimit());

		c.setCompanyCode(getCompanyCode());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		c.setShiftId(p.getShiftId());

		em.persist(c);

		List<HrorgPostnAssignment> oldAssignment = em
				.createQuery("select a from HrorgPostnAssignment a where a.id.positionCode = ?1",
						HrorgPostnAssignment.class)
				.setParameter(1, p.getPositionCode()).getResultList();

		List<HrorgPostnLinkRequirement> oldRequirement = em
				.createQuery("select a from HrorgPostnLinkRequirement a where a.id.positionCode = ?1 ",
						HrorgPostnLinkRequirement.class)
				.setParameter(1, p.getPositionCode()).getResultList();

		for (HrorgPostnAssignment h : oldAssignment) {
			ClntHrorgChartPostnAssignment c1 = new ClntHrorgChartPostnAssignment();
			c1.setIsMain(1L);
			c1.setChartCode(p.getChartCode());
			c1.setPositionCode(h.getId().getPositionCode());
			c1.setAssignmentId(h.getId().getAssignmentId());
			insertChartPostnAssignment(c1);
		}

		for (HrorgPostnLinkRequirement h : oldRequirement) {
			ClntHrorgChartPostnRequirement c1 = new ClntHrorgChartPostnRequirement();
			c1.setChartCode(p.getChartCode());
			c1.setPositionCode(h.getId().getPositionCode());
			c1.setRequirementId(h.getId().getRequirementId());
			c1.setIsMain(1L);
			insertChartPostnRequirement(c1);
		}
	}

	public void updateChartPosition(ClntHrorgChartPosition p) throws NesException {

		HrorgChartPositionPK id = new HrorgChartPositionPK();
		id.setPositionCode(Func.toStdStr(p.getPositionCode()));
		id.setChartCode(Func.toStdStr(p.getChartCode()));
		HrorgChartPosition c = em.find(HrorgChartPosition.class, id);
		if (Func.emptyOrNull(c)) {
			Func.throwNeX(41416011, "POSITION_CODE", Func.toStdStr(p.getPositionCode()), "CHART_CODE",
					Func.toStdStr(p.getChartCode()));
		}
		if (Func.equal(p.getStatusCode(), OrgchartStatus.INACTIVE)) {
			try {
<<<<<<< HEAD
				List<VwHrorgParentPosition> parentPosition = em
						.createQuery("select a from VwHrorgParentPosition a where a.parentPositionCode = ?1",
								VwHrorgParentPosition.class)
						.setParameter(1, p.getPositionCode()).getResultList();
=======
				List<VwHrorgParentPosition> parentPosition = em.createQuery(
						"select a from VwHrorgParentPosition a where a.parentPositionCode = :parentPositionCode",
						VwHrorgParentPosition.class).setParameter("parentPositionCode", p.getPositionCode())
						.getResultList();
>>>>>>> origin/develop
				if (!Func.emptyOrNull(parentPosition) && parentPosition.size() > 0) {
					HrorgPosition position = em.find(HrorgPosition.class, Func.toStdStr(p.getPositionCode()));
					if (!Func.emptyOrNull(position) && Func.equal(position.getStatusCode(), OrgchartStatus.ACTIVE)) {
						Func.throwNeX(41416018, "POSITION_CODE", Func.toStdStr(p.getPositionCode()));
					}
				}
			} catch (NoResultException ex) {
			}
		}
		c.setPlannedNumber(p.getPlannedNumber());
		c.setExistedNumber(p.getExistedNumber());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));
		c.setRank(p.getRank());
		c.setFunctions(p.getFunctions());
		c.setSalaryMaxLimit(p.getSalaryMaxLimit());
		c.setSalaryMinLimit(p.getSalaryMinLimit());

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		c.setShiftId(p.getShiftId());
	}

	public void deleteChartPosition(String chartCode, String positionCode) throws NesException {

		em.createQuery(
				"DELETE FROM HrorgChartPostnAssignment a where a.id.positionCode = ?1 and a.id.chartCode = ?2 ")
				.setParameter(1, positionCode).setParameter(2, chartCode).executeUpdate();

		em.createQuery(
				"DELETE FROM HrorgChartPostnRequirement a where a.id.positionCode = ?1 and a.id.chartCode = ?2 ")
				.setParameter(1, positionCode).setParameter(2, chartCode).executeUpdate();

		em.createQuery(
				"DELETE FROM HrorgParentPosition a where a.id.chartCode = ?1 and a.id.positionCode = ?2 ")
				.setParameter(1, chartCode).setParameter(2, positionCode).executeUpdate();

		HrorgChartPositionPK id = new HrorgChartPositionPK();
		id.setPositionCode(Func.toStdStr(positionCode));
		id.setChartCode(Func.toStdStr(chartCode));
		HrorgChartPosition c = em.find(HrorgChartPosition.class, id);
		if (c == null) {
			Func.throwNeX(41416011, "POSITION_CODE", Func.toStdStr(positionCode), "CHART_CODE",
					Func.toStdStr(chartCode));
		}

		em.remove(c);
	}

	public ClntVwHrorgChartPosition detailChartPosition(String chartCode, String positionCode) throws NesException {
		ClntVwHrorgChartPosition c1 = null;
		VwHrorgChartPosition c = null;

		try {
			c = em.createQuery(
					"select a from VwHrorgChartPosition a where a.positionCode = ?1 and a.chartCode = ?2 ",
					VwHrorgChartPosition.class).setParameter(1, positionCode)
					.setParameter(2, chartCode).getSingleResult();
		} catch (NoResultException ex) {
			Func.throwNeX(41416011, "POSITION_CODE", Func.toStdStr(positionCode), "CHART_CODE",
					Func.toStdStr(chartCode));
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgChartPosition.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	// HrorgChartHist
	public List<ClntHrorgChartHist> selectChartHist(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "CHART_CODE", "ITEM_NO", "NAME", "NAME2", "FUNCTIONS", "RANK", "PARENT_CHART_CODE",
				"STATUS_CODE", "ESTABLISHED_DATE", "LIQUIDATED_DATE", "ORDER_NO", "CHART_TYPE_ID", "COMPANY_CODE",
				"ADDR_ID", "ADDR_DETAIL", "WTIME_ID", "CALENDAR_ID", "RC_CODE" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntHrorgChartHist> e1 = null;
		List<HrorgChartHist> e = null;
		String[] orderColumns = { "ORDER_NO ASC", "MODIFIED_DATETIME DESC" };
		e = cg.getData(lstFilter, HrorgChartHist.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntHrorgChartHist.class);
		return e1;
	}

	public void insertChartHist(ClntHrorgChartHist p) throws NesException {

		HrorgChartHist c = new HrorgChartHist();
		HrorgChartHistPK id = new HrorgChartHistPK();
		id.setChartCode(Func.toStdStr(p.getChartCode()));
		id.setItemNo(p.getItemNo());
		c.setId(id);

		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setFunctions(p.getFunctions());
		c.setRank(p.getRank());
		c.setParentChartCode(Func.toStdStr(p.getParentChartCode()));
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));
		c.setEstablishedDate(p.getEstablishedDate());
		c.setLiquidatedDate(p.getLiquidatedDate());
		c.setOrderNo(p.getOrderNo());
		c.setChartTypeId(p.getChartTypeId());
		c.setAddrId(p.getAddrId());
		c.setAddrDetail(p.getAddrDetail());
		c.setWtimeId(p.getWtimeId());
		c.setCalendarId(p.getCalendarId());
		c.setRcCode(Func.toStdStr(p.getRcCode()));

		c.setCompanyCode(getCompanyCode());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);
	}

	public void updateChartHist(ClntHrorgChartHist p) throws NesException {

		HrorgChartHistPK id = new HrorgChartHistPK();
		id.setChartCode(Func.toStdStr(p.getChartCode()));
		id.setItemNo(p.getItemNo());
		HrorgChartHist c = em.find(HrorgChartHist.class, id);
		if (c == null) {
			Func.throwNeX(0, "CHART_CODE", Func.toStdStr(p.getChartCode()), "ITEM_NO", p.getItemNo());
		}
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setFunctions(p.getFunctions());
		c.setRank(p.getRank());
		c.setParentChartCode(Func.toStdStr(p.getParentChartCode()));
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));
		c.setEstablishedDate(p.getEstablishedDate());
		c.setLiquidatedDate(p.getLiquidatedDate());
		c.setOrderNo(p.getOrderNo());
		c.setChartTypeId(p.getChartTypeId());
		c.setAddrId(p.getAddrId());
		c.setAddrDetail(p.getAddrDetail());
		c.setWtimeId(p.getWtimeId());
		c.setCalendarId(p.getCalendarId());
		c.setRcCode(Func.toStdStr(p.getRcCode()));

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());
	}

	public void deleteChartHist(String chartCode, Long itemNo) throws NesException {

		HrorgChartHistPK id = new HrorgChartHistPK();
		id.setChartCode(Func.toStdStr(chartCode));
		id.setItemNo(itemNo);
		HrorgChartHist c = em.find(HrorgChartHist.class, id);
		if (c == null) {
			Func.throwNeX(0, "CHART_CODE", Func.toStdStr(chartCode), "ITEM_NO", itemNo);
		}

		em.remove(c);
	}

	public ClntHrorgChartHist detailChartHist(String chartCode, Long itemNo) throws NesException {
		ClntHrorgChartHist c1 = null;
		HrorgChartHist c = null;
		HrorgChartHistPK id = new HrorgChartHistPK();
		id.setChartCode(Func.toStdStr(chartCode));
		id.setItemNo(itemNo);
		c = em.find(HrorgChartHist.class, id);
		if (c == null) {
			Func.throwNeX(0, "CHART_CODE", Func.toStdStr(chartCode), "ITEM_NO", itemNo);
		}
		c1 = Func.CloneToClnt(c, ClntHrorgChartHist.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	// HrorgChartPostnRequirement
	// VwHrorgChartPostnReq
	public List<ClntVwHrorgChartPostnReq> selectChartPostnRequirement(Clntfilterfield[] filter, int startPosition,
			int count) throws NesException {
		cg = new Condgen();

		String[] possFields = { "POSITION_CODE", "CHART_CODE", "CHART_NAME", "CHART_NAME2", "REQUIREMENT_ID",
				"REQUIREMENT_NAME", "REQUIREMENT_NAME2", "IS_MAIN", "IS_MAIN_NAME", "IS_MAIN_NAME2" };
		cg.addPossField(possFields);

		List<ClntVwHrorgChartPostnReq> e1 = null;
		List<VwHrorgChartPostnReq> e = null;
		String[] orderColumns = { "MODIFIED_DATETIME DESC" };
		e = cg.getData(filter, VwHrorgChartPostnReq.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgChartPostnReq.class);
		return e1;
	}

	public void insertChartPostnRequirement(ClntHrorgChartPostnRequirement p) throws NesException {

		HrorgChartPostnRequirement c = new HrorgChartPostnRequirement();
		HrorgChartPostnRequirementPK id = new HrorgChartPostnRequirementPK();
		id.setPositionCode(Func.toStdStr(p.getPositionCode()));
		id.setChartCode(Func.toStdStr(p.getChartCode()));
		id.setRequirementId(p.getRequirementId());
		c.setId(id);
		c.setIsMain(p.getIsMain());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);
	}

	public void updateChartPostnRequirement(ClntHrorgChartPostnRequirement p) throws NesException {

		HrorgChartPostnRequirementPK id = new HrorgChartPostnRequirementPK();
		id.setPositionCode(Func.toStdStr(p.getPositionCode()));
		id.setChartCode(Func.toStdStr(p.getChartCode()));
		id.setRequirementId(p.getRequirementId());
		HrorgChartPostnRequirement c = em.find(HrorgChartPostnRequirement.class, id);
		if (c == null) {
			Func.throwNeX(41416012, "POSITION_CODE", Func.toStdStr(p.getPositionCode()), "CHART_CODE",
					Func.toStdStr(p.getChartCode()), "REQUIREMENT_ID", p.getRequirementId());
		}

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());
	}

	public void deleteChartPostnRequirement(String positionCode, String chartCode, Long requirementId)
			throws NesException {

		HrorgChartPostnRequirementPK id = new HrorgChartPostnRequirementPK();
		id.setPositionCode(Func.toStdStr(positionCode));
		id.setChartCode(Func.toStdStr(chartCode));
		id.setRequirementId(requirementId);
		HrorgChartPostnRequirement c = em.find(HrorgChartPostnRequirement.class, id);
		if (c == null) {
			Func.throwNeX(41416012, "POSITION_CODE", Func.toStdStr(positionCode), "CHART_CODE",
					Func.toStdStr(chartCode), Func.toStdStr(chartCode), "REQUIREMENT_ID", requirementId);
		}

		em.remove(c);
	}

	public ClntVwHrorgChartPostnReq detailChartPostnRequirement(String positionCode, String chartCode,
			Long requirementId) throws NesException {
		ClntVwHrorgChartPostnReq c1 = null;
		VwHrorgChartPostnReq c = null;
		HrorgChartPostnRequirementPK id = new HrorgChartPostnRequirementPK();
		id.setPositionCode(Func.toStdStr(positionCode));
		id.setChartCode(Func.toStdStr(chartCode));
		id.setRequirementId(requirementId);
		c = em.find(VwHrorgChartPostnReq.class, id);
		if (c == null) {
			Func.throwNeX(41416012, "POSITION_CODE", Func.toStdStr(positionCode), "CHART_CODE",
					Func.toStdStr(chartCode), "REQUIREMENT_ID", requirementId);
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgChartPostnReq.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	// HrorgChartPostnAssignment
	// VwHrorgChartPostnAss
	public List<ClntVwHrorgChartPostnAss> selectChartPostnAssignment(Clntfilterfield[] filter, int startPosition,
			int count) throws NesException {
		cg = new Condgen();

		String[] possFields = { "POSITION_CODE", "CHART_CODE", "CHART_NAME", "CHART_NAME2", "ASSIGNMENT_ID",
				"ASSIGNMENT_NAME", "ASSIGNMENT_NAME2", "IS_MAIN", "IS_MAIN_NAME", "IS_MAIN_NAME2" };
		cg.addPossField(possFields);

		List<ClntVwHrorgChartPostnAss> e1 = null;
		List<VwHrorgChartPostnAss> e = null;
		String[] orderColumns = { "MODIFIED_DATETIME DESC" };
		e = cg.getData(filter, VwHrorgChartPostnAss.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgChartPostnAss.class);
		return e1;
	}

	public void insertChartPostnAssignment(ClntHrorgChartPostnAssignment p) throws NesException {

		HrorgChartPostnAssignment c = new HrorgChartPostnAssignment();
		HrorgChartPostnAssignmentPK id = new HrorgChartPostnAssignmentPK();
		id.setPositionCode(Func.toStdStr(p.getPositionCode()));
		id.setChartCode(Func.toStdStr(p.getChartCode()));
		id.setAssignmentId(p.getAssignmentId());
		c.setId(id);
		c.setIsMain(p.getIsMain());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);
	}

	public void updateChartPostnAssignment(ClntHrorgChartPostnAssignment p) throws NesException {

		HrorgChartPostnAssignmentPK id = new HrorgChartPostnAssignmentPK();
		id.setPositionCode(Func.toStdStr(p.getPositionCode()));
		id.setChartCode(Func.toStdStr(p.getChartCode()));
		id.setAssignmentId(p.getAssignmentId());
		HrorgChartPostnAssignment c = em.find(HrorgChartPostnAssignment.class, id);
		if (c == null) {
			Func.throwNeX(41416013, "POSITION_CODE", Func.toStdStr(p.getPositionCode()), "CHART_CODE",
					Func.toStdStr(p.getChartCode()), "ASSIGNMENT_ID", p.getAssignmentId());
		}

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());
	}

	public void deleteChartPostnAssignment(String positionCode, String chartCode, Long assignmentId)
			throws NesException {

		HrorgChartPostnAssignmentPK id = new HrorgChartPostnAssignmentPK();
		id.setPositionCode(Func.toStdStr(positionCode));
		id.setChartCode(Func.toStdStr(chartCode));
		id.setAssignmentId(assignmentId);
		HrorgChartPostnAssignment c = em.find(HrorgChartPostnAssignment.class, id);
		if (c == null) {
			Func.throwNeX(41416013, "POSITION_CODE", Func.toStdStr(positionCode), "CHART_CODE",
					Func.toStdStr(chartCode), Func.toStdStr(chartCode), "ASSIGNMENT_ID", assignmentId);
		}

		em.remove(c);
	}

	public ClntVwHrorgChartPostnAss detailChartPostnAssignment(String positionCode, String chartCode, Long assignmentId)
			throws NesException {
		ClntVwHrorgChartPostnAss c1 = null;
		VwHrorgChartPostnAss c = null;

		try {
			c = em.createQuery(
					"select a from VwHrorgChartPostnAss a where a.assignmentId = ?1 and a.chartCode = ?2 and a.positionCode = ?3 ",
					VwHrorgChartPostnAss.class).setParameter(1, assignmentId)
					.setParameter(2, chartCode).setParameter(3, positionCode).getSingleResult();
		} catch (NoResultException ex) {
			Func.throwNeX(41416013, "POSITION_CODE", Func.toStdStr(positionCode), "CHART_CODE",
					Func.toStdStr(chartCode), Func.toStdStr(chartCode), "ASSIGNMENT_ID", assignmentId);
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgChartPostnAss.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	// HrorgParentPosition
	// VwHrorgParentPosition
	public List<ClntVwHrorgParentPosition> selectParentPosition(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "POSITION_CODE", "POSITION_NAME", "POSITION_NAME2", "CHART_CODE", "CHART_NAME",
				"CHART_NAME2", "PARENT_POSITION_CODE", "PARENT_POSITION_NAME", "PARENT_POSITION_NAME2", "ORDER_NO",
				"IS_HEAD", "IS_HEAD_NAME", "IS_HEAD_NAME2" };
		cg.addPossField(possFields);

		List<ClntVwHrorgParentPosition> e1 = null;
		List<VwHrorgParentPosition> e = null;
		String[] orderColumns = { "ORDER_NO ASC", "MODIFIED_DATETIME DESC" };
		e = cg.getData(filter, VwHrorgParentPosition.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgParentPosition.class);
		return e1;
	}

	public void insertParentPosition(ClntHrorgParentPosition p) throws NesException {

		HrorgParentPosition c = new HrorgParentPosition();
		HrorgParentPositionPK id = new HrorgParentPositionPK();
		id.setPositionCode(Func.toStdStr(p.getPositionCode()));
		id.setChartCode(Func.toStdStr(p.getChartCode()));
		id.setParentPositionCode(Func.toStdStr(p.getParentPositionCode()));
		c.setId(id);

		c.setOrderNo(p.getOrderNo());
		c.setIsHead(p.getIsHead());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);
	}

	public void updateParentPosition(ClntHrorgParentPosition p) throws NesException {

		HrorgParentPositionPK id = new HrorgParentPositionPK();
		id.setPositionCode(Func.toStdStr(p.getPositionCode()));
		id.setChartCode(Func.toStdStr(p.getChartCode()));
		id.setParentPositionCode(Func.toStdStr(p.getParentPositionCode()));
		HrorgParentPosition c = em.find(HrorgParentPosition.class, id);
		if (c == null) {
			Func.throwNeX(41416014, "POSITION_CODE", Func.toStdStr(p.getPositionCode()), "CHART_CODE",
					Func.toStdStr(p.getChartCode()), "PARENT_POSITION_CODE", Func.toStdStr(p.getParentPositionCode()));
		}
		c.setOrderNo(p.getOrderNo());
		c.setIsHead(p.getIsHead());

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());
	}

	public void deleteParentPosition(String positionCode, String chartCode, String parentPositionCode)
			throws NesException {

		HrorgParentPositionPK id = new HrorgParentPositionPK();
		id.setPositionCode(Func.toStdStr(positionCode));
		id.setChartCode(Func.toStdStr(chartCode));
		id.setParentPositionCode(Func.toStdStr(parentPositionCode));
		HrorgParentPosition c = em.find(HrorgParentPosition.class, id);
		if (c == null) {
			Func.throwNeX(41416014, "POSITION_CODE", Func.toStdStr(positionCode), "CHART_CODE",
					Func.toStdStr(chartCode), Func.toStdStr(chartCode), "PARENT_POSITION_CODE",
					Func.toStdStr(parentPositionCode));
		}

		em.remove(c);
	}

	public ClntVwHrorgParentPosition detailParentPosition(String positionCode, String chartCode,
			String parentPositionCode) throws NesException {
		ClntVwHrorgParentPosition c1 = null;
		VwHrorgParentPosition c = null;

		try {
			c = em.createQuery(
					"select a from VwHrorgParentPosition a where a.parentPositionCode = ?1 and a.chartCode = ?2 and a.positionCode = ?3 ",
					VwHrorgParentPosition.class).setParameter(1, parentPositionCode)
					.setParameter(2, chartCode).setParameter(3, positionCode).getSingleResult();
		} catch (NoResultException ex) {
			Func.throwNeX(41416014, "POSITION_CODE", Func.toStdStr(positionCode), "CHART_CODE",
					Func.toStdStr(chartCode), Func.toStdStr(chartCode), "PARENT_POSITION_CODE",
					Func.toStdStr(parentPositionCode));
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgParentPosition.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	// HrorgOrgchart
	public List<ClntVwHrorgOrgchart> selectOrgchart(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "CHART_ID", "NAME", "NAME2", "STATUS_CODE", "START_DATE", "PREV_CHART_ID",
				"COMPANY_CODE" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntVwHrorgOrgchart> e1 = null;
		List<VwHrorgOrgchart> e = null;
		String[] orderColumns = { "MODIFIED_DATETIME DESC" };
		e = cg.getData(lstFilter, VwHrorgOrgchart.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgOrgchart.class);

		return e1;
	}

	public Long selectMainOrgchart() throws NesException {
		cg = new Condgen();

		String[] possFields = { "CHART_ID", "NAME", "NAME2", "STATUS_CODE", "START_DATE", "PREV_CHART_ID",
				"COMPANY_CODE" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		Clntfilterfield _ff1 = new Clntfilterfield("STATUS_CODE", "A");
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.add(_ff);
		lstFilter.add(_ff1);
		List<ClntVwHrorgOrgchart> e1 = null;
		Long e2 = null;
		List<VwHrorgOrgchart> e = null;
		String[] orderColumns = { "MODIFIED_DATETIME DESC" };
		e = cg.getData(lstFilter, VwHrorgOrgchart.class, 0, -1, em, orderColumns);

		if (!e.isEmpty()) {
			e1 = Func.CloneToClntList(e, ClntVwHrorgOrgchart.class);
			e2 = e1.get(0).getChartId();
		}

		return e2;
	}

	public Long insertOrgchart(ClntHrorgOrgchart p) throws NesException {

		HrorgOrgchart c = new HrorgOrgchart();
		ClntHrorgOrgchart oldOrgchart = Func.CloneToClnt(c, ClntHrorgOrgchart.class);

		c.setChartId(p.getChartId());
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));
		c.setStartDate(p.getStartDate());
		c.setPrevChartId(p.getPrevChartId());

		ClntHrorgOrgchart newOrgchart = Func.CloneToClnt(c, ClntHrorgOrgchart.class);
		newOrgchart.setStatusName(Func.toStdStr(p.getStatusName()));
		newOrgchart.setStatusName2(Func.toStdStr(p.getStatusName2()));

		c.setCompanyCode(getCompanyCode());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);

		List<ClntDiffField> tmpDiff = Func.getDiffFields(oldOrgchart, newOrgchart, false);
		initBean.bulgMasterRmt().SaveBULG(tmpDiff, "HRORG_ORGCHART", Func.toStr(c.getChartId()), "HRORG_ORGCHART",
				Func.toStr(c.getChartId()), "ADD", 1416);

		return p.getChartId();
	}

	public void updateOrgchart(ClntHrorgOrgchart p) throws NesException {

		HrorgOrgchart c = em.find(HrorgOrgchart.class, p.getChartId());
		if (c == null) {
			Func.throwNeX(41416015, "CHART_ID", p.getChartId());
		}

		VwHrorgOrgchart c1 = null;
		c1 = em.find(VwHrorgOrgchart.class, p.getChartId());
		ClntHrorgOrgchart oldOrgchart = Func.CloneToClnt(c1, ClntHrorgOrgchart.class);

		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));
		c.setStartDate(p.getStartDate());
		c.setPrevChartId(p.getPrevChartId());

		ClntHrorgOrgchart newOrgchart = Func.CloneToClnt(c, ClntHrorgOrgchart.class);
		newOrgchart.setStatusName(Func.toStdStr(p.getStatusName()));
		newOrgchart.setStatusName2(Func.toStdStr(p.getStatusName2()));

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		List<ClntDiffField> tmpDiff = Func.getDiffFields(oldOrgchart, newOrgchart, false);
		initBean.bulgMasterRmt().SaveBULG(tmpDiff, "HRORG_ORGCHART", Func.toStr(c.getChartId()), "HRORG_ORGCHART",
				Func.toStr(c.getChartId()), "EDIT", 1416);
	}

	public ClntVwHrorgOrgchart detailOrgchart(Long chartId) throws NesException {
		ClntVwHrorgOrgchart c1 = null;
		VwHrorgOrgchart c = null;
		c = em.find(VwHrorgOrgchart.class, chartId);
		if (c == null) {
			Func.throwNeX(41416015, "CHART_ID", chartId);
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgOrgchart.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	public void isActive(Long chartId) throws NesException {
		HrorgOrgchart c = null;
		HrorgOrgchart c1 = null;
		ClntHrorgOrgchart c2 = null;
		List<HrorgOrgchartDetail> k = null;

		try {
			c = em.createQuery(
					"select a from HrorgOrgchart a where a.statusCode = ?1 and a.companyCode = ?2",
					HrorgOrgchart.class).setParameter(1, OrgchartStatus.ACTIVE)
					.setParameter(2, getCompanyCode()).getSingleResult();
		} catch (NoResultException e) {

		}

		if (Func.emptyOrNull(c)) {
			c1 = em.find(HrorgOrgchart.class, chartId);
			if (Func.emptyOrNull(c1)) {
				Func.throwNeX(41416015, "CHART_ID", chartId);
			}
			c2 = Func.CloneToClnt(c1, ClntHrorgOrgchart.class);
			c2.setStatusCode(OrgchartStatus.ACTIVE);
			c2.setStatusName(OrgchartStatus.ACTIVE_NAME);
			updateOrgchart(c2);

		} else {
			try {
				k = em.createQuery("select a from HrorgOrgchartDetail a where a.statusCode = ?1 and "
						+ "a.companyCode = ?2", HrorgOrgchartDetail.class)
						.setParameter(1, OrgchartStatus.ACTIVE).setParameter(2, getCompanyCode())
						.getResultList();
			} catch (NoResultException e) {

			}

			ClntHrorgOrgchart c3 = Func.CloneToClnt(c, ClntHrorgOrgchart.class);
			c3.setStatusCode(OrgchartStatus.INACTIVE);
			c3.setStatusName(OrgchartStatus.INACTIVE_NAME);
			updateOrgchart(c3);

			c1 = em.find(HrorgOrgchart.class, chartId);
			c2 = Func.CloneToClnt(c1, ClntHrorgOrgchart.class);
			c2.setStatusCode(OrgchartStatus.ACTIVE);
			c2.setStatusName(OrgchartStatus.ACTIVE_NAME);
			updateOrgchart(c2);
		}

	}

	// HrorgOrgchartDetail
	public List<ClntVwHrorgOrgchartDetail> selectOrgchartDetail(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "CHART_ID", "CHART_CODE", "CHART_NAME", "PARENT_CHART_CODE", "REGION_CODE", "RANK",
				"COMPANY_CODE", "STATUS_CODE" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntVwHrorgOrgchartDetail> e1 = null;
		List<VwHrorgOrgchartDetail> e = null;

		String[] orderColumns = { "MODIFIED_DATETIME DESC" };
		e = cg.getData(lstFilter, VwHrorgOrgchartDetail.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgOrgchartDetail.class);

		return e1;
	}

	public List<ClntVwHrorgChart> selectOrgchartDetail1(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "CHART_CODE", "NAME", "NAME2", "STATUS_CODE", "STATUS_NAME", "STATUS_NAME2",
				"ESTABLISHED_DATE", "LIQUIDATED_DATE", "CHART_TYPE_NAME", "CHART_TYPE_NAME2", "COMPANY_CODE",
				"ADDRESS_NAME", "ADDRESS_NAME2", "CALENDAR_NAME", "CALENDAR_NAME2", "DIRECTION_NAME", "DIRECTION_NAME2",
				"RC_CODE", "RC_NAME", "RC_NAME2", "IS_ONLINE_NAME", "IS_ONLINE", "ORG_UNIT_NAME", "ORG_UNIT_NAME2" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntVwHrorgChart> e1 = null;
		List<VwHrorgChartSelect> e = null;
		String[] orderColumns = { "ORDER_NO ASC", "MODIFIED_DATETIME DESC" };

		e = cg.getData(lstFilter, VwHrorgChartSelect.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntVwHrorgChart.class);
		return e1;
	}

	public void insertOrgchartDetail(ClntHrorgOrgchartDetail p) throws NesException {

		ClntHrorgChart k2 = null;

		HrorgOrgchartDetail c = new HrorgOrgchartDetail();
		HrorgOrgchartDetailPK id = new HrorgOrgchartDetailPK();
		id.setChartId(p.getChartId());
		id.setChartCode(Func.toStdStr(p.getChartCode()));

		HrorgOrgchartDetail e = em.find(HrorgOrgchartDetail.class, id);
		if (Func.emptyOrNull(e)) {
			c.setId(id);
			c.setParentChartCode(Func.toStdStr(p.getParentChartCode()));
			c.setRegionCode(p.getRegionCode());
			c.setRank(p.getRank());
			c.setStatusCode(Func.toStdStr(p.getStatusCode()));

			c.setCompanyCode(getCompanyCode());
			c.setCreatedDatetime(getNow());
			c.setCreatedBy(getCreatedBy());
			c.setModifiedDatetime(getNow());
			c.setModifiedBy(getCreatedBy());

			HrorgChart i = em.find(HrorgChart.class, p.getChartCode());
			if (Func.emptyOrNull(i)) {
				Func.throwNeX(41416007, "CHART_CODE", p.getChartCode());
			}
			k2 = Func.CloneToClnt(i, ClntHrorgChart.class);
			k2.setStatusCode(OrgchartStatus.ACTIVE);
			k2.setStatusName(OrgchartStatus.ACTIVE_NAME);
			updateChart(k2, p.getChartId());

			em.persist(c);
		} else {
			ClntHrorgOrgchartDetail k = Func.CloneToClnt(e, ClntHrorgOrgchartDetail.class);
			k.setParentChartCode(Func.toStdStr(p.getParentChartCode()));
			k.setRegionCode(p.getRegionCode());
			k.setRank(p.getRank());
			k.setStatusCode(Func.toStdStr(p.getStatusCode()));

			HrorgChart i = em.find(HrorgChart.class, p.getChartCode());
			if (Func.emptyOrNull(i)) {
				Func.throwNeX(41416007, "CHART_CODE", p.getChartCode());
			}
			k2 = Func.CloneToClnt(i, ClntHrorgChart.class);
			if (k2 == null) {
				Func.throwNeX(41416007, "CHART_CODE", p.getChartCode());
			} else {
				k2.setStatusCode(OrgchartStatus.ACTIVE);
				k2.setStatusName(OrgchartStatus.ACTIVE_NAME);
				updateChart(k2, p.getChartId());
			}
			updateOrgchartDetail(k);
		}

		if (k2 != null)
			syncGenCharts(k2, p.getParentChartCode());

	}

	public void updateOrgchartDetail(ClntHrorgOrgchartDetail p) throws NesException {

		HrorgOrgchartDetailPK id = new HrorgOrgchartDetailPK();
		id.setChartId(p.getChartId());
		id.setChartCode(Func.toStdStr(p.getChartCode()));
		HrorgOrgchartDetail c = em.find(HrorgOrgchartDetail.class, id);
		if (c == null) {
			Func.throwNeX(41416017, "CHART_ID", p.getChartId(), "CHART_CODE", Func.toStdStr(p.getChartCode()));
		}
		c.setParentChartCode(Func.toStdStr(p.getParentChartCode()));
		c.setRegionCode(p.getRegionCode());
		c.setRank(p.getRank());
		c.setStatusCode(Func.toStdStr(p.getStatusCode()));

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		HrorgChart i = em.find(HrorgChart.class, Func.toStdStr(p.getChartCode()));
		if (!Func.emptyOrNull(i)) {
			ClntHrorgChart k2 = Func.CloneToClnt(i, ClntHrorgChart.class);
			if (k2 != null) {
				k2.setStatusCode(Func.toStdStr(p.getStatusCode()));
				syncGenCharts(k2, p.getParentChartCode());
			}
		}
	}

	public void deleteOrgchartDetail(Long chartId, String chartCode) throws NesException {
		List<HrorgOrgchartDetail> e = null;

		e = em.createQuery("select a from HrorgOrgchartDetail a where a.parentChartCode = ?1 "
				+ "and a.companyCode = ?2 and a.statusCode = ?3", HrorgOrgchartDetail.class)
				.setParameter(1, chartCode).setParameter(2, getCompanyCode())
				.setParameter(3, OrgchartStatus.ACTIVE).getResultList();

		if (!Func.emptyOrNull(e) && e.size() > 0) {
			Func.throwNeX(41416022, "CHART_ID", e.get(0).getId().getChartId(), "CHART_CODE", Func.toStdStr(chartCode));
		} else {

			HrorgChart e1 = null;
			e1 = em.find(HrorgChart.class, chartCode);
			if (Func.emptyOrNull(e1)) {
				Func.throwNeX(41416007, "CHART_CODE", Func.toStdStr(chartCode));
			}

			ClntHrorgChart c2 = Func.CloneToClnt(e1, ClntHrorgChart.class);
			c2.setStatusCode(OrgchartStatus.INACTIVE);
			c2.setStatusName(OrgchartStatus.INACTIVE_NAME);
			updateChart(c2, chartId);

			HrorgOrgchartDetailPK id = new HrorgOrgchartDetailPK();
			id.setChartId(chartId);
			id.setChartCode(Func.toStdStr(chartCode));
			HrorgOrgchartDetail c = em.find(HrorgOrgchartDetail.class, id);
			if (c == null) {
				Func.throwNeX(41416017, "CHART_ID", chartId, "CHART_CODE", Func.toStdStr(chartCode));
			}

			em.remove(c);
		}

	}

	public ClntVwHrorgOrgchartDetail detailOrgchartDetail(Long chartId, String chartCode) throws NesException {
		ClntVwHrorgOrgchartDetail c1 = null;
		VwHrorgOrgchartDetail c = null;
		HrorgOrgchartDetailPK id = new HrorgOrgchartDetailPK();
		id.setChartId(chartId);
		id.setChartCode(Func.toStdStr(chartCode));
		c = em.find(VwHrorgOrgchartDetail.class, id);
		if (c == null) {
			Func.throwNeX(41416017, "CHART_ID", chartId, "CHART_CODE", Func.toStdStr(chartCode));
		}
		c1 = Func.CloneToClnt(c, ClntVwHrorgOrgchartDetail.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	public ClntVwHrorgOrgchartDetail detailOrgchartDetailNoException(Long chartId, String chartCode)
			throws NesException {
		ClntVwHrorgOrgchartDetail c1 = null;
		VwHrorgOrgchartDetail c = null;
		HrorgOrgchartDetailPK id = new HrorgOrgchartDetailPK();
		id.setChartId(chartId);
		id.setChartCode(Func.toStdStr(chartCode));
		c = em.find(VwHrorgOrgchartDetail.class, id);

		if (c != null) {
			c1 = Func.CloneToClnt(c, ClntVwHrorgOrgchartDetail.class);
			c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
			c1.setModifiedUserName(GetUserName(c.getModifiedBy()));
		}

		return c1;
	}

	public void inActive(Long chartId, String chartCode) throws NesException {
		List<HrorgOrgchartDetail> e = null;
		try {
			e = em.createQuery("select a from HrorgOrgchartDetail a where a.parentChartCode = ?1",
					HrorgOrgchartDetail.class).setParameter(1, chartCode).getResultList();
		} catch (NoResultException w) {

		}

		if (Func.emptyOrNull(e) || e.size() == 0) {

			HrorgChart e1 = null;
			e1 = em.find(HrorgChart.class, chartCode);
			if (Func.emptyOrNull(e1)) {
				Func.throwNeX(41416007, "CHART_CODE", chartCode);
			}

			ClntHrorgChart c2 = Func.CloneToClnt(e1, ClntHrorgChart.class);
			c2.setStatusCode(OrgchartStatus.INACTIVE);
			c2.setStatusName(OrgchartStatus.INACTIVE_NAME);
			updateChart(c2, chartId);

			HrorgOrgchartDetail e2 = null;
			HrorgOrgchartDetailPK id = new HrorgOrgchartDetailPK();
			id.setChartId(chartId);
			id.setChartCode(Func.toStdStr(chartCode));
			e2 = em.find(HrorgOrgchartDetail.class, id);

			if (Func.emptyOrNull(e2)) {
				Func.throwNeX(41416017, "CHART_ID", chartId, "CHART_CODE", Func.toStdStr(chartCode));
			}

			ClntHrorgOrgchartDetail c3 = Func.CloneToClnt(e2, ClntHrorgOrgchartDetail.class);
			c3.setStatusCode(OrgchartStatus.INACTIVE);
			updateOrgchartDetail(c3);
		} else {
			HrorgOrgchartDetail nextDetail = null;
			int i = 0;
			while (i < e.size()) {
				nextDetail = e.get(i);
				if (nextDetail.getStatusCode().equals(OrgchartStatus.ACTIVE)) {
					Func.throwNeX(41416017, "CHART_ID", chartId, "CHART_CODE", Func.toStdStr(chartCode));
				}
				i++;
			}

			HrorgChart e1 = null;
			e1 = em.find(HrorgChart.class, chartCode);
			if (Func.emptyOrNull(e1)) {
				Func.throwNeX(41416007, "CHART_CODE", Func.toStdStr(chartCode));
			}

			ClntHrorgChart c2 = Func.CloneToClnt(e1, ClntHrorgChart.class);
			c2.setStatusCode(OrgchartStatus.INACTIVE);
			c2.setStatusName(OrgchartStatus.INACTIVE_NAME);
			updateChart(c2, chartId);

			HrorgOrgchartDetail e2 = null;
			HrorgOrgchartDetailPK id = new HrorgOrgchartDetailPK();
			id.setChartId(chartId);
			id.setChartCode(Func.toStdStr(chartCode));
			e2 = em.find(HrorgOrgchartDetail.class, id);
			if (Func.emptyOrNull(e2)) {
				Func.throwNeX(41416017, "CHART_ID", chartId, "CHART_CODE", Func.toStdStr(chartCode));
			}

			ClntHrorgOrgchartDetail c3 = Func.CloneToClnt(e2, ClntHrorgOrgchartDetail.class);
			c3.setStatusCode(OrgchartStatus.INACTIVE);
			updateOrgchartDetail(c3);

		}

	}

	// HrorgRegion
	public List<ClntHrorgRegion> selectRegion(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "REGION_CODE", "NAME", "NAME2", "COMPANY_CODE" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntHrorgRegion> e1 = null;
		List<HrorgRegion> e = null;
		String[] orderColumns = { "MODIFIED_DATETIME DESC" };
		e = cg.getData(lstFilter, HrorgRegion.class, startPosition, count, em, orderColumns);
		e1 = Func.CloneToClntList(e, ClntHrorgRegion.class);
		return e1;
	}

	public Long insertRegion(ClntHrorgRegion p) throws NesException {

		Long regionCode = getSeq("HRORG_REGION");

		HrorgRegion c = new HrorgRegion();
		c.setRegionCode(regionCode);
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setIsMain(p.getIsMain());

		c.setCompanyCode(getCompanyCode());
		c.setCreatedDatetime(getNow());
		c.setCreatedBy(getCreatedBy());
		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());

		em.persist(c);

		return regionCode;
	}

	public void updateRegion(ClntHrorgRegion p) throws NesException {

		HrorgRegion c = em.find(HrorgRegion.class, p.getRegionCode());
		if (c == null) {
			Func.throwNeX(41416016, "REGION_CODE", p.getRegionCode());
		}
		c.setName(Func.toStdStr(p.getName()));
		c.setName2(Func.toStdStr(p.getName2()));
		c.setDescr(p.getDescr());
		c.setIsMain(p.getIsMain());

		c.setModifiedDatetime(getNow());
		c.setModifiedBy(getCreatedBy());
	}

	public void deleteRegion(Long regionCode) throws NesException {

		HrorgRegion c = em.find(HrorgRegion.class, regionCode);
		if (c == null) {
			Func.throwNeX(41416016, "REGION_CODE", regionCode);
		}

		em.remove(c);
	}

	public ClntHrorgRegion detailRegion(Long regionCode) throws NesException {
		ClntHrorgRegion c1 = null;
		HrorgRegion c = null;
		c = em.find(HrorgRegion.class, regionCode);
		if (c == null) {
			Func.throwNeX(41416016, "REGION_CODE", regionCode);
		}
		c1 = Func.CloneToClnt(c, ClntHrorgRegion.class);

		c1.setCreatedUserName(GetUserName(c.getCreatedBy()));
		c1.setModifiedUserName(GetUserName(c.getModifiedBy()));

		return c1;
	}

	public List<ClntVwHrorgChartLst> selectChartListMain(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		filter = gen.checkOrgChartPriv(filter, null, "CHART_CODE");
		return selectChartLst(filter, startPosition, count);
	}

	// VwHrorgChartLst
	public List<ClntVwHrorgChartLst> selectChartLst(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();
		String[] possFields = { "CHART_CODE", "NAME", "NAME2", "PARENT_CHART_CODE", "REGION_CODE", "STATUS_CODE",
				"COMPANY_CODE", "CREATED_BY" };
		cg.addPossField(possFields);

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		List<ClntVwHrorgChartLst> e1 = null;
		List<VwHrorgChartLst> e = null;
		e = cg.getData(lstFilter, VwHrorgChartLst.class, startPosition, count, em);
		e1 = Func.CloneToClntList(e, ClntVwHrorgChartLst.class);
		return e1;
	}

	public List<ClntVwHrorgChartLst> selectChartLstAll(Clntfilterfield[] filter) throws NesException {

		Clntfilterfield _ff = new Clntfilterfield("COMPANY_CODE", getCompanyCode());
		ArrayList<Clntfilterfield> lstFilter = new ArrayList<Clntfilterfield>();
		lstFilter.addAll(Arrays.asList(filter));
		lstFilter.add(_ff);
		CResult parmRes = null;
		List<ClntVwHrorgChartLst> e1 = null;
		List<VwHrorgChartLst> e = null;

		parmRes = Condgen.getConditionAsStringWithOrdinalVar(lstFilter, 1);
		String sql = "SELECT * FROM VW_HRORG_CHART_LST ";
		if (lstFilter != null && !lstFilter.isEmpty()) {
			sql = sql + " where " + parmRes.getData();
			Query q = em.createNativeQuery(sql, VwHrorgChartLst.class);
			ArrayList al = (ArrayList) parmRes.getRetParams()[1];
			for (int i = 1; i < Func.toInt(parmRes.getRetParams()[0]) + 1; i++) {
				q.setParameter(i, al.get(i - 1));
			}
			e = q.getResultList();
		} else {
			e = em.createNativeQuery(sql, VwHrorgChartLst.class).getResultList();
		}
		e1 = Func.CloneToClntList(e, ClntVwHrorgChartLst.class);
		return e1;
	}

	// VwHrorgPostnDocument
	public List<ClntVwHrorgPostnDocument> selectPostnDocument(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "POSITION_CODE", "DOC_CODE", "NAME", "NAME2" };
		cg.addPossField(possFields);

		List<ClntVwHrorgPostnDocument> e1 = null;
		List<VwHrorgPostnDocument> e = null;
		e = cg.getData(filter, VwHrorgPostnDocument.class, startPosition, count, em);
		e1 = Func.CloneToClntList(e, ClntVwHrorgPostnDocument.class);
		return e1;
	}

	public void insertPostnDocument(ClntHrorgPostnDocument p) throws NesException {

		HrorgPostnDocument c = new HrorgPostnDocument();
		HrorgPostnDocumentPK id = new HrorgPostnDocumentPK();
		id.setPositionCode(Func.toStdStr(p.getPositionCode()));
		id.setDocCode(Func.toStdStr(p.getDocCode()));
		c.setId(id);

		em.persist(c);
	}

	public void deletePostnDocument(String positionCode, String docCode) throws NesException {

		HrorgPostnDocumentPK id = new HrorgPostnDocumentPK();
		id.setPositionCode(Func.toStdStr(positionCode));
		id.setDocCode(Func.toStdStr(docCode));
		HrorgPostnDocument c = em.find(HrorgPostnDocument.class, id);
		if (c == null) {
			Func.throwNeX(41416023, "POSITION_CODE", Func.toStdStr(positionCode), "DOC_CODE", Func.toStdStr(docCode));
		}

		em.remove(c);
	}

	public ClntHrorgPostnDocument detailPostnDocument(String positionCode, String docCode) throws NesException {
		ClntHrorgPostnDocument c1 = null;
		HrorgPostnDocument c = null;
		HrorgPostnDocumentPK id = new HrorgPostnDocumentPK();
		id.setPositionCode(Func.toStdStr(positionCode));
		id.setDocCode(Func.toStdStr(docCode));
		c = em.find(HrorgPostnDocument.class, id);
		if (c == null) {
			Func.throwNeX(41416023, "POSITION_CODE", Func.toStdStr(positionCode), "DOC_CODE", Func.toStdStr(docCode));
		}
		c1 = Func.CloneToClnt(c, ClntHrorgPostnDocument.class);

		return c1;
	}

	public boolean checkPostnDocument(String positionCode, String docCode, boolean throwNotFoundException)
			throws NesException {
		HrorgPostnDocument c = null;
		HrorgPostnDocumentPK id = new HrorgPostnDocumentPK();
		id.setPositionCode(Func.toStdStr(positionCode));
		id.setDocCode(Func.toStdStr(docCode));
		c = em.find(HrorgPostnDocument.class, id);
		if (c == null) {
			if (throwNotFoundException) {
				Func.throwNeX(41416023, "POSITION_CODE", Func.toStdStr(positionCode), "DOC_CODE",
						Func.toStdStr(docCode));
			} else
				return false;
		}

		return true;
	}

	public List<ClntVwHrempPositionList> selectPositionList(Clntfilterfield[] filter, int startPosition, int count)
			throws NesException {
		cg = new Condgen();

		String[] possFields = { "EMP_CODE", "PERSON_CODE", "PERSON_NAME", "PERSON_NAME2", "EMP_TYPE_ID",
				"EMP_TYPE_NAME", "EMP_TYPE_NAME2", "POSITION_CODE", "POSITION_NAME", "POSITION_NAME2", "RANK_ID",
				"RANK_NAME", "RANK_NAME2", "CHART_CODE", "CHART_NAME", "CHART_NAME2", "REGISTER_CODE", "START_DATE",
				"END_DATE", "IS_MAIN", "IS_PLANNED", "STATUS_CODE", "WORKED_MONTH" };
		cg.addPossField(possFields);

		List<ClntVwHrempPositionList> e1 = null;
		List<VwHrempPositionList> e = null;
		e = cg.getData(filter, VwHrempPositionList.class, startPosition, count, em);
		e1 = Func.CloneToClntList(e, ClntVwHrempPositionList.class);
		return e1;
	}

	@Override
	@SuppressWarnings("unchecked")
	public void deleteOrgchart(Long chartId) throws NesException {

		HrorgOrgchart c = em.find(HrorgOrgchart.class, chartId);

		List<HrorgOrgchartDetail> sql = em.createNativeQuery(
				"select * from HRORG_ORGCHART_DETAIL where chart_id = ?1 and status_code  in ('A') ",
				HrorgOrgchartDetail.class).setParameter(1, chartId).getResultList();
		if (!Func.emptyOrNull(sql) && sql.size() > 0 && !Func.equal(sql.get(0).getStatusCode(), "I"))
			Func.throwNeX(41416024, "CHART_ID", chartId);

		if (c == null) {
			Func.throwNeX(41416015, "CHART_ID", chartId);
		}

		em.remove(c);

	}

	@Override
	public List<String> selectDetailFilter(String chartCode, String regionCode) throws NesException {

		List<String> chartDetail = null;

		if (!Func.emptyOrNull(chartCode) || !Func.emptyOrNull(regionCode)) {
			// Region, chart 2langaar n shuuvel
			if (!Func.emptyOrNull(chartCode) && !Func.emptyOrNull(regionCode)) {
				chartDetail = em
						.createNativeQuery("SELECT DET.CHART_CODE " 
								+ "   FROM HRORG_ORGCHART_DETAIL DET "
								+ "  WHERE     (DET.CHART_CODE = ?1 OR DET.PARENT_CHART_CODE = ?2) "
								+ "        AND DET.REGION_CODE = ?3")
						.setParameter(1, Func.toStr(chartCode).toUpperCase())
						.setParameter(2, Func.toStr(chartCode).toUpperCase())
						.setParameter(3, Func.toLong(regionCode)).getResultList();
			}
			// Zuvhun chart r shuuvel
			else if (!Func.emptyOrNull(chartCode)) {
				chartDetail = em
						.createNativeQuery("SELECT DET.CHART_CODE " + "   FROM HRORG_ORGCHART_DETAIL DET "
								+ "  WHERE     (DET.CHART_CODE = ?1 OR DET.PARENT_CHART_CODE = ?2) ")
						.setParameter(1, Func.toStr(chartCode).toUpperCase()).setParameter(2, Func.toStr(chartCode).toUpperCase()).getResultList();
			}
			// Zuvhun region-r shuuvel
			else if (!Func.emptyOrNull(regionCode)) {
				chartDetail = em
						.createNativeQuery("SELECT DET.CHART_CODE " + "   FROM HRORG_ORGCHART_DETAIL DET "
								+ "  WHERE  DET.REGION_CODE = ?1")
						.setParameter(1, Func.toLong(regionCode)).getResultList();
			}

			return chartDetail;
		} else
			return null;

	}

	private void syncGenCharts(ClntHrorgChart p, String parentChartCode) throws NesException {

		Long status = 1L;
		if (Func.toStdStr(p.getStatusCode()).equals("A"))
			status = 1L;
		else
			status = 0L;

		ClntGenOrgChart p1 = new ClntGenOrgChart();
		if (initBean.gen().checkOrgChart(p.getChartCode(), false)) {
			p1 = initBean.gen().detailOrgChart(p.getChartCode());
			p1.setOrgChartCode(p.getChartCode());
			p1.setName(p.getName());
			p1.setName2(p.getName2());
			p1.setTypeId(p.getChartTypeId());
			p1.setRcCode(p.getRcCode());
			p1.setAddrId(p.getAddrId());
			p1.setAddressDetail(p.getAddrDetail());
			p1.setCalendarId(p.getCalendarId());
			p1.setStatus(status);
			p1.setParentChartCode(parentChartCode);
			p1.setHeadEmpId(p.getHeadEmpId());
			p1.setOrderNo(p.getOrderNo());

			initBean.gen().updateOrgChart(p1);

		} else {
			p1.setOrgChartCode(p.getChartCode());
			p1.setName(p.getName());
			p1.setName2(p.getName2());
			p1.setTypeId(p.getChartTypeId());
			p1.setRcCode(p.getRcCode());
			p1.setAddrId(p.getAddrId());
			p1.setAddressDetail(p.getAddrDetail());
			p1.setCalendarId(p.getCalendarId());
			p1.setStatus(status);

			p1.setParentChartCode(parentChartCode);
			p1.setHeadEmpId(p.getHeadEmpId());
			p1.setOrderNo(p.getOrderNo());

			initBean.gen().insertOrgChart(p1);
		}

		String addAutoChart = initBean.gen().GetConfigValue(1416, "ADD_AUTO_CHART");
		if (addAutoChart.equals("1")) {
			ClntGenFaChart p2 = new ClntGenFaChart();
			if (initBean.gen().checkFaChart(p.getChartCode(), false)) {
				ClntVwGenFaChart faChart = initBean.gen().detailFaChart(p.getChartCode());
				p2 = Func.CloneToClnt(faChart, ClntGenFaChart.class);
				p2.setFaChartCode(p.getChartCode());
				p2.setName(p.getName());
				p2.setName2(p.getName2());
				p2.setRcCode(p.getRcCode());
				p2.setAddrId(p.getAddrId());
				p2.setAddressDetail(p.getAddrDetail());
				p2.setStatus(status);
				p2.setOrderNo(p.getOrderNo());

				p2.setParentChartCode(parentChartCode);
				p2.setHeadEmpId(p.getHeadEmpId());
				initBean.gen().updateFaChart(p2);
			} else {
				p2.setFaChartCode(p.getChartCode());
				p2.setName(p.getName());
				p2.setName2(p.getName2());
				p2.setRcCode(p.getRcCode());
				p2.setAddrId(p.getAddrId());
				p2.setAddressDetail(p.getAddrDetail());
				p2.setStatus(status);
				p2.setIsDepr(1L);

				p2.setOrderNo(p.getOrderNo());
				p2.setParentChartCode(parentChartCode);
				p2.setHeadEmpId(p.getHeadEmpId());
				initBean.gen().insertFaChart(p2);
			}
			em.flush();
			em.clear();
			Long skladEmpId = initBean.hri().checkHriSkladEmp(p.getChartCode());
			if (Func.nullOrZero(skladEmpId)) {
				ClntHriEmployee hriEmp = new ClntHriEmployee();
				hriEmp.setOrgChartCode(p.getChartCode());
				hriEmp.setFirstName("СКЛАД");
				hriEmp.setLastName(p.getChartCode());
				hriEmp.setIsCust(0L);
				skladEmpId = initBean.hri().InsertEmployee(hriEmp, true);
			}

			ClntFaChartEmployee skladFaEmp = initBean.fa().getChartEmployee(skladEmpId);
			if (skladFaEmp == null) {
				ClntFaChartEmployee pFaChart = new ClntFaChartEmployee();
				pFaChart.setEmployeeId(skladEmpId);
				pFaChart.setFaChartCode(p.getChartCode());
				initBean.fa().insertChartEmployee(pFaChart);
			}

			em.flush();
			em.clear();
			ClntGenInvWarehouse p3 = new ClntGenInvWarehouse();
			if (initBean.gen().checkWarehouse(p.getChartCode(), false)) {
				ClntVwGenInvWarehouse wh = initBean.gen().detailInvWarehouse(p.getChartCode());
				p3 = Func.CloneToClnt(wh, ClntGenInvWarehouse.class);
				p3.setWhCode(p.getChartCode());
				p3.setName(p.getName());
				p3.setName2(p.getName2());
				p3.setRcCode(p.getRcCode());
				p3.setAddrId(p.getAddrId());
				p3.setAddressDetail(p.getAddrDetail());
				p3.setStatus(status);

				p3.setOrderNo(p.getOrderNo());
				p3.setAllowOd(0L);
				p3.setIsCenter(0L);

				p3.setParentWhCode(parentChartCode);
				p3.setHeadEmpId(p.getHeadEmpId());
				initBean.gen().updateInvWarehouse(p3);
			} else {

				p3.setWhCode(p.getChartCode());
				p3.setName(p.getName());
				p3.setName2(p.getName2());
				p3.setRcCode(p.getRcCode());
				p3.setAddrId(p.getAddrId());
				p3.setAddressDetail(p.getAddrDetail());
				p3.setStatus(status);
				p3.setOrderNo(p.getOrderNo());
				p3.setAllowOd(0L);
				p3.setIsCenter(0L);
				p3.setParentWhCode(parentChartCode);
				p3.setHeadEmpId(p.getHeadEmpId());
				initBean.gen().insertInvWarehouse(p3);
			}
			em.flush();
			em.clear();
		}
	}

}